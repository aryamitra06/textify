{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","className","role","Navbar","props","id","mode","to","title","type","onClick","toggleBtn","htmlFor","Textform","useState","text","setText","myStyle","color","Textfrommode","backgroundColor","heading","rows","value","onChange","event","target","placeholder","style","UpperCasedText","toUpperCase","showAlertinTextForm","disabled","length","LowerCasedText","toLowerCase","newText","split","join","document","getElementById","select","execCommand","filter","n","defaultProps","Alert","alert","msg","App","setMode","setAlert","showAlert","setTimeout","innerHTML","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ef5bcd94.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction About() {\r\n  return (\r\n    <>\r\n    <div className=\"container my-5\">\r\n    <div className=\"alert alert-success\" role=\"alert\">\r\n<h4 className=\"alert-heading\">About Textify v1.0</h4>\r\n<p>Textify an open-source application which helps to analyze texts by removing extra spaces, lower case, upper case and many more.</p>\r\n<hr/>\r\n<p className=\"mb-0\">&copy; Aryamitra Chaudhuri. Made with ❤️ by React JS.</p>\r\n</div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default About\r\n","//type rfc\r\nimport React from 'react'\r\n//importing props type\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <div>\r\n            <>\r\n<nav id=\"nav\" className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n      {/* props means properties which i want to pass as a argument */}\r\n    <Link className=\"navbar-brand\" to=\"/textify\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/textify\" className=\"nav-link active\" aria-current=\"page\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/about\" className=\"nav-link active\" aria-current=\"page\">About</Link>\r\n        </li>\r\n      </ul>\r\n      <form className=\"d-flex\">\r\n      <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick= {props.toggleBtn}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" id=\"modeText\">Enable Dark Theme</label>\r\n</div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n</>\r\n        </div>\r\n    )\r\n}\r\n\r\n//using prop types to specify proper props used in app\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n  }\r\n\r\n\r\n//if we don't pass any props values in component, then default props will show\r\nNavbar.defaultProps = {\r\n    title: \"Add title here\"\r\n}","import React, { useState } from 'react'\r\n\r\n\r\n\r\n\r\nexport default function Textform(props) {\r\n\r\n    function toUpper(){\r\n            let UpperCasedText = text.toUpperCase();\r\n            setText(UpperCasedText); \r\n            props.showAlertinTextForm(\"Converted to Uppercase !\", \"Success\");      \r\n    }\r\n    const toLower = ()=>{\r\n        let LowerCasedText = text.toLowerCase();\r\n        setText(LowerCasedText);\r\n        props.showAlertinTextForm(\"Converted to Lowercase !\", \"Success\");\r\n    }\r\n    function clearbtn(){\r\n        let clear = \"\";\r\n        setText(clear);\r\n        props.showAlertinTextForm(\"Text cleared !\", \"Success\");\r\n}\r\n    const handleOnchange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState(\"\") //useState(\"\") contains default value of the text state\r\n\r\n\r\nfunction handleCopy(){\r\n   const copiedText = document.getElementById('textBox');\r\n   copiedText.select();\r\n   document.execCommand(\"copy\");\r\n   props.showAlertinTextForm(\"Text copied to clipboard!\", \"Success\");\r\n}\r\n\r\nfunction removeExtraSpaces(){\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlertinTextForm(\"Extra spaces removed !\", \"Success\");\r\n}\r\n\r\n//changing color acording to the dark and light theme of the app\r\n\r\nlet myStyle = {\r\n    color: props.Textfrommode === 'dark'?'white':'black',\r\n    backgroundColor: props.Textfrommode === 'dark'?'black':'white'\r\n}\r\n\r\n    return (\r\n        <>\r\n  \r\n<div className=\"container mt-5\" id=\"mainApp\">\r\n            <h3 className=\"\">{props.heading}</h3>\r\n            <textarea className=\"form-control\" id=\"textBox\" rows=\"15\" value={text} onChange={handleOnchange} placeholder=\"Write something...\" style={myStyle}></textarea>\r\n            <button className=\"btn btn-success mt-2 mx-1\" onClick= {toUpper} disabled={text.length===0}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-success mt-2 mx-1\" onClick= {toLower} disabled={text.length===0}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-success mt-2 mx-1\" onClick= {removeExtraSpaces} disabled={text.length===0}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-success mt-2 mx-1\" onClick= {clearbtn} disabled={text.length===0}>Clear</button>\r\n            {/* <button className=\"btn btn-primary mt-2 mx-1\" onClick= {toggleStyle}>{btnText}</button> */}\r\n            <button className=\"btn btn-success mt-2 mx-1\" onClick= {handleCopy} disabled={text.length===0}>Copy</button>\r\n            <br/><br/>\r\n            <div className=\"container\" id=\"mainCount\">\r\n            <h4>Word Count</h4>\r\n            <p>{text.split(' ').filter(function(n) { return n !== '' }).length} words and {text.length} characters</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Type something to see the preview...\" }</p>\r\n            <h3>Read Time</h3>\r\n            <p>{0.008*text.split(' ').filter(function(n) { return n !== '' }).length} min(s)</p>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './Alert.css';\r\nexport default function Alert(props) {\r\n    return (\r\n        <>\r\n        <div className=\"container-fluid set-alert\">\r\n        {props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n  <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //state to make the app dark and light mode\n\n  const [alert, setAlert] = useState(null);\n\n  function showAlert(msg, type){\n    setAlert({\n      msg: msg,\n      type: type\n    })\n  }\n  \n  setTimeout(() => {\n    setAlert(null);\n  }, 2000);\n\n\n\nconst toggleMode = () => {\n  if(mode==='light')\n  {\n    setMode('dark');\n    showAlert(\"Dark mode has been enabled !\", \"Success\");\n\n    //this is for the nav dark-light theme toogle operation\n    document.getElementById('modeText').style.color='white';\n    document.getElementById('modeText').innerHTML='Disable Dark Mode';\n\n    document.body.style.backgroundColor='#161616';\n    document.body.style.color='white';\n   \n  }\n  else\n  {\n    setMode('light');\n    showAlert(\"Light mode has been enabled !\", \"Success\");\n\n    //this is for the nav dark-light theme toogle operation\n    document.getElementById('modeText').style.color='black';\n    document.getElementById('modeText').innerHTML='Enable Dark Mode';\n\n    document.body.style.backgroundColor='white';\n    document.body.style.color='black';\n  }\n}\n\n  return (\n<>\n<Router>\n<Navbar title = \"Textify\" mode={mode} toggleBtn={toggleMode}/>\n<Alert alert = {alert}/>\n<Switch>\n          <Route exact path=\"/about\">\n            <About/>\n          </Route>\n          <Route exact path=\"/textify\">\n            <Textform heading = \"\" showAlertinTextForm = {showAlert} Textfrommode={mode}/>\n          </Route>\n</Switch>\n</Router>\n\n\n</>\n  );\n}\n\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}