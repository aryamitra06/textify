{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","className","role","Navbar","props","id","mode","to","title","type","onClick","toggleBtn","htmlFor","Textform","useState","text","setText","heading","rows","value","onChange","event","target","placeholder","UpperCasedText","toUpperCase","showAlertinTextForm","LowerCasedText","toLowerCase","newText","split","join","document","getElementById","select","execCommand","filter","n","length","Alert","alert","msg","defaultProps","App","setMode","setAlert","showAlert","setTimeout","style","color","innerHTML","body","backgroundColor","exact","path","TextformMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3d79f82a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction About() {\r\n  return (\r\n    <>\r\n    <div className=\"container my-5\">\r\n    <div className=\"alert alert-success\" role=\"alert\">\r\n<h4 className=\"alert-heading\">About Textify v1.0</h4>\r\n<p>Textify an open-source application which helps to analyze texts by removing extra spaces, lower case, upper case and many more.</p>\r\n<hr/>\r\n<p className=\"mb-0\">&copy; Aryamitra ChaudhurI. Made with ❤️ by React JS.</p>\r\n</div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default About\r\n","//type rfc\r\nimport React from 'react'\r\n//importing props type\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <div>\r\n            <>\r\n<nav id=\"nav\" className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n      {/* props means properties which i want to pass as a argument */}\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/\" className=\"nav-link active\" aria-current=\"page\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/about\" className=\"nav-link active\" aria-current=\"page\">About</Link>\r\n        </li>\r\n      </ul>\r\n      <form className=\"d-flex\">\r\n      <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick= {props.toggleBtn}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" id=\"modeText\">Enable Dark Theme</label>\r\n</div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n</>\r\n        </div>\r\n    )\r\n}\r\n\r\n//using prop types to specify proper props used in app\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n  }\r\n\r\n\r\n//if we don't pass any props values in component, then default props will show\r\nNavbar.defaultProps = {\r\n    title: \"Add title here\"\r\n}","import React, { useState } from 'react'\r\n\r\n\r\n\r\n\r\nexport default function Textform(props) {\r\n\r\n    function toUpper(){\r\n            let UpperCasedText = text.toUpperCase();\r\n            setText(UpperCasedText); \r\n            props.showAlertinTextForm(\"Converted to Uppercase !\", \"Success\");      \r\n    }\r\n    const toLower = ()=>{\r\n        let LowerCasedText = text.toLowerCase();\r\n        setText(LowerCasedText);\r\n        props.showAlertinTextForm(\"Converted to Lowercase !\", \"Success\");\r\n    }\r\n    function clearbtn(){\r\n        let clear = \"\";\r\n        setText(clear);\r\n        props.showAlertinTextForm(\"Text cleared !\", \"Success\");\r\n}\r\n    const handleOnchange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState(\"\") //useState(\"\") contains default value of the text state\r\n\r\n    // const [btnText, SetBtnText] = useState(\"Enable Dark Mode\"\r\n\r\n//     const [myStyle, setMyStyle] = useState({\r\n//         color: 'black',\r\n//         backgroundColor: 'white'\r\n//     }\r\n// )\r\n// function toggleStyle(){\r\n//     if(myStyle.color=== 'black')\r\n//     {\r\n//         setMyStyle({\r\n//                 color: 'white',\r\n//                 backgroundColor: 'black'\r\n//             }\r\n//         )\r\n//         SetBtnText(\"Enable Light Mode\");\r\n//     }\r\n//     else\r\n//     {\r\n//         setMyStyle({\r\n//                 color: 'black',\r\n//                 backgroundColor: 'white'\r\n//             }\r\n//         )\r\n//         SetBtnText(\"Enable Dark Mode\");\r\n//     }\r\n// }\r\n\r\nfunction handleCopy(){\r\n   const copiedText = document.getElementById('textBox');\r\n   copiedText.select();\r\n   document.execCommand(\"copy\");\r\n   props.showAlertinTextForm(\"Text copied to clipboard!\", \"Success\");\r\n}\r\n\r\nfunction removeExtraSpaces(){\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlertinTextForm(\"Extra spaces removed !\", \"Success\");\r\n}\r\n\r\n    return (\r\n        <>\r\n  \r\n<div className=\"container mt-5\" id=\"mainApp\">\r\n            <h3 className=\"\">{props.heading}</h3>\r\n            <textarea className=\"form-control\" id=\"textBox\" rows=\"15\" value={text} onChange={handleOnchange} placeholder=\"Write something...\"></textarea>\r\n            <button className=\"btn btn-primary mt-2 mx-1\" onClick= {toUpper}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mt-2 mx-1\" onClick= {toLower}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mt-2 mx-1\" onClick= {removeExtraSpaces}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary mt-2 mx-1\" onClick= {clearbtn}>Clear</button>\r\n            {/* <button className=\"btn btn-primary mt-2 mx-1\" onClick= {toggleStyle}>{btnText}</button> */}\r\n            <button className=\"btn btn-primary mt-2 mx-1\" onClick= {handleCopy}>Copy</button>\r\n            <br/><br/>\r\n            <div className=\"container\" id=\"mainCount\">\r\n            <h4>Word Count</h4>\r\n            <p>{text.split(' ').filter(function(n) { return n !== '' }).length} words and {text.length} characters</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Type something to see the preview...\" }</p>\r\n            <h3>Read Time</h3>\r\n            <p>{0.008*text.split(' ').filter(function(n) { return n !== '' }).length} min(s)</p>\r\n        </div>\r\n        </div>\r\n\r\n \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n  <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n</div>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //state to make the app dark and light mode\n\n  const [alert, setAlert] = useState(null);\n\n  function showAlert(msg, type){\n    setAlert({\n      msg: msg,\n      type: type\n    })\n  }\n  \n  setTimeout(() => {\n    setAlert(null);\n  }, 1500);\n\n\n\nconst toggleMode = () => {\n  if(mode==='light')\n  {\n    setMode('dark');\n    showAlert(\"Dark mode has been enabled !\", \"Success\");\n    document.getElementById('modeText').style.color='white';\n    document.getElementById('modeText').innerHTML='Disable Dark Theme';\n    document.body.style.backgroundColor='#161616';\n    document.body.style.color='white';\n   \n  }\n  else\n  {\n    setMode('light');\n    showAlert(\"Light mode has been enabled !\", \"Success\");\n    document.getElementById('modeText').style.color='black';\n    document.body.style.backgroundColor='white';\n    document.body.style.color='black';\n    document.getElementById('modeText').innerHTML='Enable Dark Theme';\n    \n   \n  }\n}\n\n  return (\n<>\n<Router>\n<Navbar title = \"Textify\" mode={mode} toggleBtn={toggleMode}/>\n<Alert alert = {alert}/>\n<Switch>\n          <Route exact path=\"/about\">\n            <About/>\n          </Route>\n          <Route exact path=\"/\">\n            <Textform heading = \"\" showAlertinTextForm = {showAlert} TextformMode={mode}/>\n          </Route>\n</Switch>\n</Router>\n\n\n</>\n  );\n}\n\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}